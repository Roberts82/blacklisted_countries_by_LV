library(tidyverse)
library(rvest)
library(data.table)
# list of urls used:
# 1) 31.03.1995. "Noteikumi par beznodokļu vai zemu nodokļu valstīm un zonām". https://likumi.lv/ta/id/34462-noteikumi-par-beznodoklu-vai-zemu-nodoklu-valstim-un-zonam
# 2) 06.05.1997. "Grozījums Ministru kabineta 1995.gada 31.marta noteikumos nr.69 "Noteikumi par beznodokļu vai zemu nodokļu valstīm un zonām"" https://likumi.lv/ta/id/43367-grozijums-ministru-kabineta-1995-gada-31-marta-noteikumos-nr-69-noteikumi-par-beznodoklu-vai-zemu-nodoklu-valstim-un-zonam-
# 3) 26.06.2001. "Noteikumi par zemu nodokļu vai beznodokļu valstīm un teritorijām" https://m.likumi.lv/doc.php?id=25839&version_date=30.06.2001
# 4) 22.04.2004. "Grozījums Ministru kabineta 2001.gada 26.jūnija noteikumos Nr.276 "Noteikumi par zemu nodokļu vai beznodokļu valstīm un teritorijām"" https://likumi.lv/ta/id/87710-grozijums-ministru-kabineta-2001-gada-26-junija-noteikumos-nr-276-noteikumi-par-zemu-nodoklu-vai-beznodoklu-valstim-un-teritori...
# 5) 12.01.2010. "Grozījumi Ministru kabineta 2001.gada 26.jūnija noteikumos Nr.276 "Noteikumi par zemu nodokļu vai beznodokļu valstīm un teritorijām"" https://likumi.lv/ta/id/203679-grozijumi-ministru-kabineta-2001-gada-26-junija-noteikumos-nr-276-noteikumi-par-zemu-nodoklu-vai-beznodoklu-valstim-un-teritori…
# 6)
# 7)
# 8)
# 9)
# 10)
# ***** I. YEAR 1995 VERSION *****
# Define the URL to scrape
url <- "https://likumi.lv/ta/id/34462-noteikumi-par-beznodoklu-vai-zemu-nodoklu-valstim-un-zonam"
# Use rvest to scrape the website and extract the relevant text
webpage <- read_html(url)
text <- webpage %>%
html_nodes("div p") %>%
html_text() %>%
str_extract("\\d+\\.\\s.*")
# Print the extracted text
cat(text)
# Extract strings width the pattern of "number(s)-dot-space-string(ends width string)"
valstis95 <- str_extract_all(text, pattern = "^([0-9]+)\\.\\s+(.*)$") %>%
map_chr(toString)
# filter only jurisdictions
valstis95 <- valstis95[5:59]
# split into 2 columns based on space
valstis95 <- str_split_fixed(valstis95, " ", 2)
# assign new column names
valstis95 <- `colnames<-`(valstis95, c("pkt.95", "teritorija"))
valstis95 <- as.data.frame(valstis95)
view(valstis95)
# typeof(valstis95)
# summary(valstis95)
# is.data.frame(valstis95)
# ***** II. YEAR 1997 VERSION (AMENDMENTS 1 TO YEAR 95 VERSION) *****
valstis97 <- valstis95 %>%
filter(pkt.95 != "48.")
# ***** III. YEAR 2001 VERSION (NEW REGULATION) *****
# Define the URL to scrape
# url1 <- "https://www.vestnesis.lv/ta/id/25839"
url1 <- "https://m.likumi.lv/doc.php?id=25839&version_date=30.06.2001"
# Use rvest to scrape the website and extract the relevant text
webpage1 <- read_html(url1)
text1 <- webpage1 %>%
html_nodes("div p") %>%
html_text() %>%
str_extract("^([0-9]+)\\.([0-9]+).*")
# str_extract("^\\d+\\.\\d+\\.\\s.*+|\\(|\\)")
# Print the extracted text
cat(text1)
# Extract strings width the pattern of "number(s)-dot-space-string(ends width string)"
valstis2001 <- str_extract_all(text1, pattern = "^([0-9]+)\\.([0-9]+).*") %>%
map_chr(toString)
# filter only jurisdictions
valstis2001 <- valstis2001[2:69]
# split into 2 columns based on space
valstis2001 <- str_split_fixed(valstis2001, " ", 2)
# assign new column names
valstis2001 <- `colnames<-`(valstis2001, c("pkt.2001", "teritorija"))
valstis2001 <- as.data.frame(valstis2001)
view(valstis2001)
# typeof(valstis2001)
# summary(valstis2001)
# is.data.frame(valstis2001)
# ***** IV. YEAR 2004 VERSION (AMENDMENTS 1 TO YEAR 2001 VERSION) *****
valstis2004 <- valstis2001 %>%
filter(pkt.2001 != "1.32.")
# ***** V. YEAR 2010 VERSION (AMENDMENTS 2 TO YEAR 2001 VERSION) *****
valstis2010 <- valstis2004 %>%
filter(!pkt.2001 %in% c("1.29.", "1.40.", "1.54."))
# ***** VI. YEAR 2013 VERSION (AMENDMENTS 3 TO YEAR 2001 VERSION) *****
valstis2013 <- valstis2010 %>%
filter(!pkt.2001 %in% c("1.4."))
valstis2013 <- valstis2013 %>%
add_row(pkt.2001 = "1.31.1",
teritorija = "Kirasao (Nīderlandes Karaliste)")
valstis2013 <- valstis2013 %>% add_row(pkt.2001 = "1.60.1",
teritorija = "Sintmārtena (Nīderlandes Karaliste)")
valstis2013 <- valstis2013 %>%
arrange(teritorija)
# ***** VII. YEAR 2017 VERSION (NEW REGULATION) *****
# Define the URL to scrape
url2 <- "https://m.likumi.lv/doc.php?id=294935"
# Use rvest to scrape the website and extract the relevant text
webpage2 <- read_html(url2)
text2 <- webpage2 %>%
html_nodes("div p") %>%
html_text() %>%
str_extract("^([0-9]+)\\.([0-9]+).*")
# str_extract("^\\d+\\.\\d+\\.\\s.*+|\\(|\\)")
# Print the extracted text
cat(text2)
# Extract strings width the pattern of "number(s)-dot-space-string(ends width string)"
valstis2017 <- str_extract_all(text2, pattern = "^([0-9]+)\\.([0-9]+).*") %>%
map_chr(toString)
# filter only jurisdictions
valstis2017 <- valstis2017[3:27]
# split into 2 columns based on space
valstis2017 <- str_split_fixed(valstis2017, " ", 2)
# assign new column names
valstis2017 <- `colnames<-`(valstis2017, c("pkt.2017", "teritorija"))
valstis2017 <- as.data.frame(valstis2017)
# remove the unnecessary symbols at the end of the string (for country names to be better comparable)
valstis2017$teritorija <- str_remove_all(valstis2017$teritorija, ";")
valstis2017$teritorija <- str_remove_all(valstis2017$teritorija, "\\.")
view(valstis2017)
# ***** VIII. YEAR 2020 VERSION (NEW REGULATION) *****
# Define the URL to scrape
url3 <- "https://m.likumi.lv/doc.php?id=319726"
# Use rvest to scrape the website and extract the relevant text
webpage3 <- read_html(url3)
text3 <- webpage3 %>%
html_nodes("div p") %>%
html_text() %>%
str_extract("^([0-9]+)\\.([0-9]+).*")
# str_extract("^\\d+\\.\\d+\\.\\s.*+|\\(|\\)")
# Print the extracted text
cat(text3)
# Extract strings width the pattern of "number(s)-dot-space-string(ends width string)"
valstis2020 <- str_extract_all(text3, pattern = "^([0-9]+)\\.([0-9]+).*") %>%
map_chr(toString)
# filter only jurisdictions
valstis2020 <- valstis2020[3:14]
# use gsub() to add a space after the second dot. In the end semicolon or dot (otherwise the problem width the dot)
valstis2020 <- gsub("(\\..*\\.)(.*;|*.)", "\\1 \\2", valstis2020)
# split into 2 columns based on space
valstis2020 <- str_split_fixed(valstis2020, " ", 2)
# assign new column names
valstis2020 <- `colnames<-`(valstis2020, c("pkt.2020", "teritorija"))
valstis2020 <- as.data.frame(valstis2020)
valstis2020$teritorija <- str_remove_all(valstis2020$teritorija, ";")
valstis2020$teritorija <- str_remove_all(valstis2020$teritorija, "\\.")
view(valstis2020)
# ***** IX. YEAR 2022 VERSION (AMENDMENTS 1 TO YEAR 2020 VERSION) *****
valstis2022_1 <- valstis2020 %>%
filter(!pkt.2020 %in% c("2.1.", "2.5.", "2.10."))
view(valstis2022_1)
# ***** X. YEAR 2022_2 VERSION (AMENDMENTS 2 TO YEAR 2020 VERSION) *****
# Define the URL to scrape
url4 <- "https://m.likumi.lv/doc.php?id=338298"
# Use rvest to scrape the website and extract the relevant text
webpage4 <- read_html(url4)
text4 <- webpage4 %>%
html_nodes("div p") %>%
html_text() %>%
str_extract("^([0-9]+)\\.([0-9]+).*")
# str_extract("^\\d+\\.\\d+\\.\\s.*+|\\(|\\)")
# Print the extracted text
cat(text4)
# Extract strings width the pattern of "number(s)-dot-space-string(ends width string)"
valstis2022_2 <- str_extract_all(text4, pattern = "^([0-9]+)\\.([0-9]+).*") %>%
map_chr(toString)
# filter only jurisdictions
valstis2022_2 <- valstis2022_2[7:18]
# split into 2 columns based on space
valstis2022_2 <- str_split_fixed(valstis2022_2, " ", 2)
# assign new column names
valstis2022_2 <- `colnames<-`(valstis2022_2, c("pkt.2020", "teritorija"))
valstis2022_2 <- as.data.frame(valstis2022_2)
# remove the unnecessary symbols at the end of strings
valstis2022_2$teritorija <- str_remove_all(valstis2022_2$teritorija, ";")
valstis2022_2$teritorija <- str_remove_all(valstis2022_2$teritorija, ".\"")
view(valstis2022_2)
# *** EXTRACT UNIQUE NAMES OF JURISDICTIONS (USING DATA.TABLE LIST OF DF)***
# teritorijas_kopa <- rbindlist(list(valstis95$teritorija, valstis97$teritorija, valstis2001$teritorija,
#                                    valstis2004$teritorija, valstis2010$teritorija, valstis2013$teritorija,
#                                    valstis2017$teritorija, valstis2020$teritorija, valstis2022_1$teritorija,
#                                    valstis2022_2$teritorija))
teritorijas_kopa <- rbindlist(list(valstis95, valstis97, valstis2001,
valstis2004, valstis2010, valstis2013,
valstis2017, valstis2020, valstis2022_1,
valstis2022_2))
ter_kop_tab <- teritorijas_kopa %>%
select(teritorija)
ter_unik <- unique(ter_kop_tab) %>%
arrange(teritorija)
# teritorijas_unikalas <- unique(teritorijas_kopa$teritorija)
# NEXT STEP - CREATE VECTORS TO REPLACE NAMES (1) SCRAPE LV OFFICIAL TABLE & USE OFFICIAL NAMES
# REPLACE NAMES IN ALL DF (CREATE A LIST)
# JOIN ISO-2/3
# ADD MISSING VALUES WHERE POSSIBLE
# For each regulaton/amendment "Starts" and "Ends" vectors need to be created
# *** in the beginning DF for each version of the list over time, and then use anti_join() where necessary
# ***need to check all the names to be consistent
# *** iso-3 and iso-2 need to be added as columns
# is it worth to colorcode based on the regulation? Or rectangles? Or vline()?
# to use igraph for indirect control?
# How about numbering? Ordered factor? Alphabetical order is used anyway, but in Latvian, so better to use ordered factor
# What to regress to? Are there purposes in the EU documents? Ex ante? Researches?
View(valstis2001)
View(valstis2001)
View(valstis2004)
View(ter_unik)
typeof(ter_unik)
typeof(valstis2001)
str(ter_unik)
install.packages("stringdist")
library(stringdist)
# Fuzzy matches width stringdist
df1 <- ter_unik
df2 <- ter_unik
View(df1)
adist(df1$teritorija, df2$teritorija)
agrep(df1$teritorija, df2$teritorija, max.distance = 10, value = TRUE)
View(df1)
agrep(df1[1], df2$teritorija, max.distance = 10, value = TRUE)
agrep(df1[1,1], df2$teritorija, max.distance = 10, value = TRUE)
amatch(df1$teritorija, df2$teritorija, maxDist = 10)
amatch(df1[1], df2$teritorija, maxDist = 10)
vec1 <- as.vector(df1)
View(vec1)
vec1
vec2 <- as.vector(df2)
amatch(vec1, vec2, maxDist = 10)
stringdistmatrix(vec1)
stringdistmatrix(vec1, vec2)
stringdistmatrix(df1$teritorija, df2$teritorija)
stringdistmatrix(df1$teritorija, df2$teritorija, useNames = TRUE)
stringdistmatrix(df1$teritorija)
# stringdistmatrix(df1$teritorija, df2$teritorija, useNames = TRUE)
stringdistmatrix(df1$teritorija, df2$teritorija)
# stringdistmatrix(df1$teritorija, df2$teritorija, useNames = TRUE)
p <- stringdistmatrix(df1$teritorija, df2$teritorija)
p1 <- as.data.frame(stringdistmatrix(df1$teritorija, df2$teritorija, useNames = TRUE))
View(p1)
p1 %>%
filter(across(vars<10))
p1 %>%
filter(all_vars(colnames(p1)<10))
filter_all(p1, all_vars(. < 11))
p1
filter_all(p1, any_vars(. < 11))
filter_all(p1, all_vars(. < 11))
filter(p1, all_vars(. < 11))
filter_all(p1, all_vars(. < 11))
filter_at(p1, all_vars(. < 11))
filter_at(p1, at_vars(. < 11))
filter_at(p1, all_vars(. < 11))
heatmap(p1)
str(p1)
heatmap(p1)
heatmap(p1, colnames = TRUE, rownames = TRUE)
p <- stringdistmatrix(df1$teritorija, df2$teritorija)
heatmap(p)
heatmap(p, col = cm.colors(256))
# stringdistmatrix(df1$teritorija, df2$teritorija, useNames = TRUE)
p <- stringdistmatrix(df1$teritorija, df2$teritorija, useNames = TRUE)
heatmap(p, col = cm.colors(256))
heatmap(p, col = cm.colors(256), method = "hamming")
p_hamming <- stringdistmatrix(df1$teritorija, df2$teritorija, useNames = TRUE, method = "hamming")
heatmap(p_hamming, col = cm.colors(256))
p_osa <- stringdistmatrix(df1$teritorija, df2$teritorija, useNames = TRUE, method = "hamming")
heatmap(p_osa, col = cm.colors(256))
p_osa <- stringdistmatrix(df1$teritorija, df2$teritorija, method = "osa", useNames = TRUE)
heatmap(p_osa, col = cm.colors(256))
heatmap(p_osa, col = cm.colors(256))
p_d1 <- stringdistmatrix(df1$teritorija, df2$teritorija, method = "d1", useNames = TRUE)
p_dl <- stringdistmatrix(df1$teritorija, df2$teritorija, method = "dl", useNames = TRUE)
heatmap(p_dl, col = cm.colors(256))
p_hamming <- stringdistmatrix(df1$teritorija, df2$teritorija, method = "hamming", useNames = TRUE)
p_lcs <- stringdistmatrix(df1$teritorija, df2$teritorija, method = "lcs", useNames = TRUE)
p_qgram <- stringdistmatrix(df1$teritorija, df2$teritorija, method = "qgram", useNames = TRUE)
p_cosine <- stringdistmatrix(df1$teritorija, df2$teritorija, method = "cosine", useNames = TRUE)
p_jaccard <- stringdistmatrix(df1$teritorija, df2$teritorija, method = "jaccard", useNames = TRUE)
p_jw <- stringdistmatrix(df1$teritorija, df2$teritorija, method = "jw", useNames = TRUE)
p_soundex <- stringdistmatrix(df1$teritorija, df2$teritorija, method = "soundex", useNames = TRUE)
heatmap(p_hamming, col = cm.colors(256))
heatmap(p_hamming, col = cm.colors(256))
heatmap(p_lcs, col = cm.colors(256))
heatmap(p_qgram, col = cm.colors(256))
heatmap(p_cosine, col = cm.colors(256))
heatmap(p_jaccard, col = cm.colors(256))
heatmap(p_jw, col= colorRampPalette(brewer.pal(8, "Blues"))(25)) # this seemes to be the most useful
heatmap(p_jw, col= colorRampPalette(brewer.pal(8, "Blues")) # this seemes to be the most useful
heatmap(p_jw, col= colorRampPalette(brewer.pal(8, "Blues"))) # this seemes to be the most useful
heatmap(p_jw, col= colorRampPalette(brewer.pal(8, "Blues"))) # this seemes to be the most useful
install.packages("RColorBrewer")
library(RColorBrewer)
heatmap(p_jw, col= colorRampPalette(brewer.pal(8, "Blues"))(25)) # this seemes to be the most useful
heatmap(p_soundex, col= colorRampPalette(brewer.pal(8, "Blues"))(25))
heatmap(p_soundex, col= colorRampPalette(brewer.pal(8, "Blues"))(25), RowSideColors=brewer.pal(9, "Set1")[my_group])
heatmap(p_soundex, col= colorRampPalette(brewer.pal(8, "Blues"))(25), RowSideColors=brewer.pal(9, "Set1"))
heatmap(p_soundex, col= colorRampPalette(brewer.pal(8, "Blues"))(25))
heatmap(p_jw, col = terrain.colors(256)) # this seemes to be the most useful
heatmap(p_soundex, col = terrain.colors(256))
heatmap(p_jw, col = cm.colors(256)) # this seemes to be the most useful
heatmap(p_jw, col = terrain.colors(256)) # this seemes to be the most useful
p
ter_unik
df1
df1$teritorija
txt_to_remove <- c("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", "Republika")
df1_rem_str <- gsub(teritorija %in% txt_to_remove, " ", ter_unik)
txt_to_remove <- c("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", "Republika")
df1_rem_str <- gsub(ter_unik$teritorija %in% txt_to_remove, " ", ter_unik)
df1_rem_str
df1_rem_str <- gsub_all(ter_unik$teritorija %in% txt_to_remove, " ", ter_unik)
df1_rem_str <- gsub(contains(ter_unik$teritorija %in% txt_to_remove), " ", ter_unik)
df1_rem_str <- gsub(grepl(ter_unik$teritorija %in% txt_to_remove), " ", ter_unik)
df1_rem_str <- gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", " ", ter_unik)
df1_rem_str
df2_rem_str <- df1_rem_str
p_rem_jw <- stringdistmatrix(df1_rem_str$teritorija, df2_rem_str$teritorija, method = "jw", useNames = TRUE)
df1_rem_str <- gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", " ", ter_unik)
df2_rem_str <- df1_rem_str
p_rem_jw <- stringdistmatrix(df1_rem_str$teritorija, df2_rem_str$teritorija, method = "jw", useNames = TRUE)
p_rem_jw <- stringdistmatrix(df1_rem_str, df2_rem_str, method = "jw", useNames = TRUE)
heatmap(p_rem_jw, col = terrain.colors(256)) # this seemes to be the most useful
df1_rem_str <- as.data.frame(gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", " ", ter_unik))
df2_rem_str <- df1_rem_str
p_rem_jw <- stringdistmatrix(df1_rem_str$teritorija, df2_rem_str$teritorija, method = "jw", useNames = TRUE)
heatmap(p_rem_jw, col = terrain.colors(256)) # this seemes to be the most useful
str(p_jw)
str(p_rem_jw)
df1_rem_str <- as.list(gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", " ", ter_unik))
df2_rem_str <- df1_rem_str
str(p_jw)
str(p_rem_jw)
ter_unik
str(p_jw)
str(p_rem_jw)
df1_rem_str <- gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", " ", ter_unik)
df2_rem_str <- df1_rem_str
df1
df1_rem_str
df1_rem_str <- as.data.frame(gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", " ", ter_unik))
df1_rem_str
df1_rem_str <- as.data.frame(gsub("/(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste/)", " ", ter_unik))
df2_rem_str <- df1_rem_str
df1_rem_str
df1_rem_str <- as.data.frame(gsub("//(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste//)", " ", ter_unik))
df2_rem_str <- df1_rem_str
df1_rem_str
df1_rem_str <- as.data.frame(gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", "", ter_unik))
df2_rem_str <- df1_rem_str
df1_rem_str
df1_rem_str <- as.data.frame(gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", "", ter_unik$teritorija))
df2_rem_str <- df1_rem_str
df1_rem_str
p_rem_jw <- stringdistmatrix(df1_rem_str$teritorija, df2_rem_str$teritorija, method = "jw", useNames = TRUE)
heatmap(p_rem_jw, col = terrain.colors(256)) # this seemes to be the most useful
p_rem_jw
p
df1_rem_str <- gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", "", ter_unik$teritorija)
df2_rem_str <- df1_rem_str
p_rem_jw <- stringdistmatrix(df1_rem_str$teritorija, df2_rem_str$teritorija, method = "jw", useNames = TRUE)
df1_rem_str <- ter_unik %>%
gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", "", ter_unik$teritorija)
df1_rem_str <- ter_unik %>%
gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", "")
df1_rem_str <- unlist(gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", "", ter_unik))
df2_rem_str <- df1_rem_str
p_rem_jw <- stringdistmatrix(df1_rem_str$teritorija, df2_rem_str$teritorija, method = "jw", useNames = TRUE)
p_rem_jw <- stringdistmatrix(df1_rem_str[[teritorija]], df2_rem_str[[teritorija]], method = "jw", useNames = TRUE)
p_rem_jw <- stringdistmatrix(df1_rem_str[teritorija], df2_rem_str[teritorija], method = "jw", useNames = TRUE)
p_rem_jw <- stringdistmatrix(df1_rem_str$teritorija, df2_rem_str$teritorija, method = "jw", useNames = TRUE)
is.atomic(df1)
is.atomic(df1_rem_str)
df1 <- ter_unik
df2 <- ter_unik
p_jw <- stringdistmatrix(df1$teritorija, df2$teritorija, method = "jw", useNames = TRUE)
heatmap(p_jw, col = cm.colors(256)) # this seemes to be the most useful
df1_rem_str <- df1
df1_rem_str$teritorija <- unlist(gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", "", df1_rem_str$teritorija))
df2_rem_str <- df1_rem_str
p_rem_jw <- stringdistmatrix(df1_rem_str$teritorija, df2_rem_str$teritorija, method = "jw", useNames = TRUE)
heatmap(p_rem_jw, col = terrain.colors(256)) # this seemes to be the most useful
df1_rem_str <- df1
df1_rem_str$teritorija <- unlist(gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", "", df1_rem_str$teritorija))
df1_rem_str$teritorija <- unlist(gsub("Republika", "R.", df1_rem_str$teritorija))
df2_rem_str <- df1_rem_str
p_rem_jw <- stringdistmatrix(df1_rem_str$teritorija, df2_rem_str$teritorija, method = "jw", useNames = TRUE)
heatmap(p_rem_jw, col = terrain.colors(256)) # this seemes to be the most useful
df1_rem_str <- df1
df1_rem_str$teritorija <- unlist(gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", "", df1_rem_str$teritorija))
df1_rem_str$teritorija <- unlist(gsub("Republika", "R.", df1_rem_str$teritorija))
df1_rem_str$teritorija <- unlist(gsub("Nīderlandes karaliste", "NK", df1_rem_str$teritorija))
df2_rem_str <- df1_rem_str
p_rem_jw <- stringdistmatrix(df1_rem_str$teritorija, df2_rem_str$teritorija, method = "jw", useNames = TRUE)
heatmap(p_rem_jw, col = terrain.colors(256)) # this seemes to be the most useful
df1_rem_str <- df1
df1_rem_str$teritorija <- unlist(gsub("(Lielbritānijas un Ziemeļīrijas Apvienotā Karaliste)", "", df1_rem_str$teritorija))
df1_rem_str$teritorija <- unlist(gsub("Republika", "R.", df1_rem_str$teritorija))
df1_rem_str$teritorija <- unlist(gsub("Nīderlandes Karaliste", "NK", df1_rem_str$teritorija))
df2_rem_str <- df1_rem_str
p_rem_jw <- stringdistmatrix(df1_rem_str$teritorija, df2_rem_str$teritorija, method = "jw", useNames = TRUE)
heatmap(p_rem_jw, col = terrain.colors(256)) # this seemes to be the most useful
View(valstis97)
?setdiff
Starts_01.04.1995 <- valstis95$teritorija
# * Batch 2
Ends_10.05.1997 <- setdiff(valstis95$teritorija, valstis97$teritorija)
Starts_10.05.1997 <- setdiff(valstis97$teritorija, valstis95$teritorija)
Ends_30.06.2001 <- setdiff(valstis97$teritorija, valstis2001$teritorija)
Starts_30.06.2001 <- setdiff(valstis2001$teritorija, valstis97$teritorija)
Ends_01.05.2004 <- setdiff(valstis2001$teritorija, valstis2004$teritorija)
Starts_01.05.2004 <- setdiff(valstis2004$teritorija, valstis2001$teritorija)
# * Batch 5
Ends_16.01.2010 <- setdiff(valstis2004$teritorija, valstis2010$teritorija)
Starts_01.05.2004 <- setdiff(valstis2010$teritorija, valstis2004$teritorija)
# * Batch 6
Ends_08.03.2013 <- setdiff(valstis2010$teritorija, valstis2013$teritorija)
Starts_08.03.2013 <- setdiff(valstis2013$teritorija, valstis2010$teritorija)
# * Batch 7
Ends_01.01.2018 <- setdiff(valstis2013$teritorija, valstis2017$teritorija)
Starts_01.01.2018 <- setdiff(valstis2017$teritorija, valstis2013$teritorija)
Ends_01.01.2018 <- setdiff(valstis2013$teritorija, valstis2017$teritorija)
Starts_01.01.2018 <- setdiff(valstis2017$teritorija, valstis2013$teritorija)
# * Batch 8
Ends_01.01.2021 <- setdiff(valstis2017$teritorija, valstis2020$teritorija)
Starts_01.01.2021 <- setdiff(valstis2020$teritorija, valstis2017$teritorija)
# * Batch 9
Ends_14.01.2022 <- setdiff(valstis2020$teritorija, valstis2022_1$teritorija)
Starts_14.01.2022 <- setdiff(valstis2022_1$teritorija, valstis2020$teritorija)
# * Batch 10
Ends_01.01.2023 <- setdiff(valstis2022_1$teritorija, valstis2022_2$teritorija)
Starts_01.01.2023 <- setdiff(valstis2022_2$teritorija, valstis2022_1$teritorija)
Ends_01.03.2023 <- c()
webpage5 <- read_html(url5)
url5 <- "https://www.vestnesis.lv/op/2018/218.9"
webpage5 <- read_html(url5)
text5 <- webpage5 %>%
html_nodes('//*[contains(concat( " ", @class, " " ), concat( " ", "mk_table", " " ))]') %>%
html_table()
webpage5 <- read_html(url5)
text5 <- webpage5 %>%
html_nodes('///*[contains(concat( " ", @class, " " ), concat( " ", "mk_table", " " ))]') %>%
html_table()
webpage5 <- read_html(url5)
text5 <- webpage5 %>%
html_nodes('/*[contains(concat( " ", @class, " " ), concat( " ", "mk_table", " " ))]') %>%
html_table()
webpage5 <- read_html(url5)
text5 <- webpage5 %>%
html_nodes() %>%
html_table()
webpage5 <- read_html(url5)
text5 <- webpage5 %>%
html_nodes(xpath= '//*[contains(concat( " ", @class, " " ), concat( " ", "mk_table", " " ))]') %>%
html_table()
cat(text5)
text5
webpage5 <- read_html(url5)
text5 <- webpage5 %>%
html_nodes(xpath= '//*[contains(concat( " ", @class, " " ), concat( " ", "mk_table", " " ))]') %>%
html_table(header = TRUE)
webpage5
webpage5 <- read_html(url5)
text5 <- webpage5 %>%
html_nodes(xpath= '//*[contains(concat( " ", @class, " " ), concat( " ", "mk_table", " " ))]') %>%
html_table()
iso2_valstis_LV <- as.data.frame(webpage5)
View(webpage5)
iso2_valstis_LV <- as.data.frame(text5)
View(iso2_valstis_LV)
text5 %>%
filter(2:)
text5 %>%
filter(2,)
iso2_valstis_LV <- as.data.frame(text5[2,])
iso2_valstis_LV <- as.data.frame(text5)
iso2_valstis_LV <- iso2_valstis_LV %>%
filter(2,)
iso2_valstis_LV <- as.data.frame(text5)
iso2_valstis_LV <- iso2_valstis_LV %>%
filter(2:253,)
iso2_valstis_LV <- as.data.frame(text5[-1,])
iso2_valstis_LV <- as.data.frame(text5[[-1,]])
iso2_valstis_LV <- data.frame(text5[-1,])
webpage5 <- read_html(url5)
text5 <- webpage5 %>%
html_nodes(xpath= '//*[contains(concat( " ", @class, " " ), concat( " ", "mk_table", " " ))]') %>%
html_table()
iso2_valstis_LV <- data.frame(text5)
View(iso2_valstis_LV)
new_colnames <- as.character(iso2_valstis_LV[2,])
iso2_valstis_LV <- iso2_valstis_LV[-1:-2,]
View(iso2_valstis_LV)
new_colnames <- data.frame(new_colnames)
View(new_colnames)
new_colnames <- t(data.frame(new_colnames))
colnames(iso2_valstis_LV) <- new_colnames
View(iso2_valstis_LV)
getwd()
git remote add origin https://github.com/Roberts82/blacklisted_countries_by_LV.git
git remote add origin https://github.com/Roberts82/blacklisted_countries_by_LV.git
savehistory("~/Library/Mobile Documents/com~apple~CloudDocs/MovedOneDrive/03_Rakstiem Publikacijam Referatiem/32_arzonu_sar_LV/_Rproj/Untitled.Rhistory")
